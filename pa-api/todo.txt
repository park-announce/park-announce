
--API

api katmani n instance calisacak.
uzerinde socket connectionlari tutacak
her api instance ayaga kalkarken redisden ya da zookeperdan 0 dan baslayarak kendisine bos bir id almaya calisacak. 
ve belirli periyotlar ile redise hearthbeat mesaji gonderecek ve ayakta oldugunu soyleyecek.
api herhangi bir nedenle crash ya da down oldugunda calistigi platform tarafindan otomatik olarak ayaga kaldirilacak.
api gracefully shutdown oldugunda, redisten elde ettigi id degerini bosa cikarmalidir.
redisteki bu deger bosa cikarilmazsa, yeni ayaga kalkacak api en sondaki bos yeri arayacaktir. (arada bos id yer almayacaktir.)

clienttan gonderilen istekler kafkada client_request isimli topic'e yazilacak. bu topice yazilan mesaj iceiriginde istegin geldigi apinin id bilgisidi de yer alacak.

{
    "api_id":0,
    "client_id":"asasasasasasasas"
}

client_request isimli topicteki mesajlari consumer service okuyacak ve veri tabanindan uygun lokasyonlari bulacak. elde ettigi sonuclari kafkada client_response_x
formatindaki topice yazacak . buradaki x degeri client_request topicinden okunan mesaj icerisindeki api_id alanindaki deger olmalidir.

client_response_0
client_response_1
client_response_2
client_response_3

api intanceda kendi idsine ait mesajlari client_response_x formatindaki topicten dinlecek.

herhangi bir api instance crash oldugunda uzerinde socket baglantilari kapanir ve client otomatik olarak belirli bir algoritma ile (onerror metotdunda) tekrar baglanti acmaya calisacaktir.
client tekrar baglanti actiginda, acilan yeni baglanti bir onceki baglanti actigi api olmayabilecegi icin,
bir onceki istegi ile ilgili cevap kendisine ulasmayacaktir. bunun icin client_response_x formatindaki topicten consume edilen mesaj icerisindeki client_id degeri o intance uzerinde bulunmuyorsa
bu mesaj client_response_braodcast isimli topice yazilacaktir. bu topic butun intancelar tarafindan (consumer group tanimi yapilmadan, yani ayni mesajin butun clientlara gidecegi sekilde)
consume edilecektir. boylece client baska bir api ye baglandiysa ve hala baglanti aciksa, mesaj clienta ulasacaktir.

her api kendine baglanti acan socket client objelerini key degeri clientid olacak sekilde bir map ya da dictionary de tutacaktir.

--CLIENT
client web socket baglantisi acacaktir.
baglanti herhangi bir nedenle koptugunda otomatik olarak tekrar acilacaktir. ancak otomatik olarak tekrar baglanti acma isterkleri arasindaki sure exponansiyel olarak artacaktir.
uygulamada yer arama aktif oldugu surece, belirli periyotlarda kullanicinin guncel konumu uzerinden en yakin uygun park yerleri listelenmesi icin socket mesaji gonderilecektir.
client'in gonderdigi istekler icin kendi tarafinda bir id degeri tutulacaktir. en son gonderilen islemin id degeri ile socket uzerinden kendisine gelen mesaj icerisindeki id degerinin eslesip eslesmedigi
client tarafindan kontrol edilecektir. eslesme yoksa bu mesaji dikkate almayacaktir(client'in ayni islemi birden fazla defa denemesi sonrasinda ilk denemesi icin gec gelen cevabin dikkate alinmamasi gerekiyor.)
belirli bir konuma alinmak istendiginde google map uygulamasi acilacak.


var socket = new WebSocket("ws://localhost:8000/socket/connect");

socket.onopen = function () {
    console.log("connected")
};

socket.onmessage = function (e) {
    console.log(e.data);
};


--mevcut konuma ve belli bir uzakliga gore en yakin park yerlerini elde etmek icin gonderilen istek
socket.send('{"operation":"get_locations_nearby","transaction_id":"123e4567-e89b-12d3-a456-426655440000","data":{"longitude":583521.85,"latitude":4507077.86,"distance":5000}}');

--bos park yeri bildirimi yapmak icin
socket.send('{"operation":"create_park_location","transaction_id":"123e4567-e89b-12d3-a456-426655440000","data":{"longitude":583521.85,"latitude":4507077.86}}');

--park yerini belirli bir sure sonra bosaltacagini bildirmek icin.
socket.send('{"operation":"schedule_park_availability","transaction_id":"123e4567-e89b-12d3-a456-426655440000","data":{"longitude":583521.85,"latitude":4507077.86,"duration":300}}');


--mevcut socket baglantisina ornek mesaj gonderimi
curl -kv -d '{"message":"test message"}' http://localhost:8000/socket/messages


KAFKA

docker exec -it kafka bash

cd /opt/kafka/bin

--topic list
./kafka-topics.sh --zookeeper zookeeper:2181 --list

--console consumer
./kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic client_request --from-beginning

--console producer
./kafka-console-producer.sh --bootstrap-server kafka:9092 --topic client_response_0



--pa_corporation_users tablosuna kayit islemi oncesinde gereken token'i almak icin
--bu istek oncesinde pa_corporation_users tablosunda resulguldibi@gmail.com ile bir kullanici yoksa eklemek icin asagidaki script calistirilir.

INSERT INTO public.pa_corporation_users(id, status, email, password, corporation_id) VALUES ('932b7062-6435-4be1-83d1-b37f9d3f0333', 1, 'resulguldibi@gmail.com', '$2a$10$E8rQ34gcb/80PT.c1o.WXu22AEcf7BPTqHBsWWfmi1dw9bjNleSAu','932b7062-6435-4be1-83d1-b37f9d3f0448');
	


curl --location 'http://localhost:8000/corporation/token' \
--header 'Content-Type: application/json' \
--data-raw '{
    "email": "resulguldibi@gmail.com",
    "password": "1234"
}'

--pa_corporation_users tablosuna kayit eklemek icin (bir onceki adimda alinan token kullaniliyor)

curl --location 'http://localhost:8000/corporation/users' \
--header 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjkzMmI3MDYyLTY0MzUtNGJlMS04M2QxLWIzN2Y5ZDNmMDMzMyIsImZuYW1lIjoiIiwibG5hbWUiOiIiLCJlbWFpbCI6InJlc3VsZ3VsZGliaUBnbWFpbC5jb20iLCJwaWN0dXJlIjoiIn0.Lw9S54iGC0E4h8uY_5E5DW6m8yTLpOpAhG6Yzk4FLT4' \
--header 'Content-Type: application/json' \
--data-raw '{
    "email": "fatihberksoz@gmail.com",
    "corporation_id": "932b7062-6435-4be1-83d1-b37f9d3f0448"
}'